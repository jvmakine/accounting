(authenticator 2)
(accounting.routes/authenticator 2)
(:require [accounting.operations :as operations])
ecit
(doc nil?)
(if (nil? nil) 1 2)
(if (nil? 1 1 2)
(if (nil?) 1 1 2)
(if (nil? 1) 1 2)
exiy
(= 1 2)
(= 1 1)
(let [a {:a 1 :b 2}] a)
(let [a {:a 1 :b 2}] (:a a))
(let [a {:a 1 :b 2}] (:b a))
([5 6 7] 1)
([5 6 7] 0)
(first [1 2 3])
(first [])
(use 'accounting.service.account)
(list 8)
(use 'accounting.service.user)
(require 'accounting.service.user :as user)
(require 'accounting.service.user :as 'user)
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.operations)
(session-put! "user-id" 8)
(use 'sandbar.stateful-session)
(session-put! "user-id" 8)
(account/list 8)
(use 'accounting.service.account)
)list 8)
(list 8)
(use 'accounting.service.account)
(list 8)
