(authenticator 2)
(accounting.routes/authenticator 2)
(:require [accounting.operations :as operations])
ecit
(doc nil?)
(if (nil? nil) 1 2)
(if (nil? 1 1 2)
(if (nil?) 1 1 2)
(if (nil? 1) 1 2)
exiy
(= 1 2)
(= 1 1)
(let [a {:a 1 :b 2}] a)
(let [a {:a 1 :b 2}] (:a a))
(let [a {:a 1 :b 2}] (:b a))
([5 6 7] 1)
([5 6 7] 0)
(first [1 2 3])
(first [])
(use 'accounting.service.account)
(list 8)
(use 'accounting.service.user)
(require 'accounting.service.user :as user)
(require 'accounting.service.user :as 'user)
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.operations)
(session-put! "user-id" 8)
(use 'sandbar.stateful-session)
(session-put! "user-id" 8)
(account/list 8)
(use 'accounting.service.account)
)list 8)
(list 8)
(use 'accounting.service.account)
(list 8)
(require '(clj-json [core :as json]))
(json/parse-string "{\"foo\":\"bar\"}")
(json/parse-string "{foo:\"bar\"}")
(json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}")
(:a (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}"))
(:b (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}"))
(doc json/parse-string)
(first (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}"))
(last (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}"))
(first (last (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}")))
(json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}" true)
(require '(korma [db :as db]))
(doc db/insert)
(require '(korma [core :as core]))
(doc core/insert)
(use '(accounting.service.accounting))
(get 1 1)
(get 0 1)
(get 0 0)
(get 1 6)
(get 1 1)
(use '(accounting.service.accounting))
(get 8 1)
(get 8 0)
(get 8 3)
(list 8)
(require '(accounting.service [accounting :as a]))
(require '(accounting.service [account :as a]))
(a/get 8 1)
(a/get 8 2)
(a/get 8 3)
(a/get 8 7)
(require '(accounting.service [account :as a]))
(a/new "testi" "foo" 1)
(a/new "testi" "foo" 2)
(a/new "testi" "foo" 8)
(require '(accounting.service [account :as a]))
(a/new "testi33" "foo" 8)
(require '(accounting.service [account :as a]))
(a/remove [8 21])
(a/remove 8 21)
(read-string "66")
(+ "6" 6)
"6"
(require '(korma [db :as db]))
(require '(korma [core :as core]))
(require '(accounting.service [account :as a]))
(require '(accounting.service [db :as d]))
(require '(korma [core :as core]))
(require '(korma [db :as db]))
(select d/accounts)
(select d/account)
(sb/select d/account)
(db/select d/account)
(core/select d/account)
(core/select d/account (fields {:name}))
(core/select d/account (fields :name))
(core/select d/account (core/fields :name))
(core/exec-raw "select * from event" [])
(core/exec-raw ["select * from event" []] :result)
(core/exec-raw ["select * from event" []] :results)
(core/exec-raw ["select * from account" []] :results)
(doc core/exec-raw)
(core/exec-raw ["select name from account" []] :results)
(merge {:a 1 :b 2} {c: 3})
(merge {:a 1 :b 2} {:c 3})
(merge {:a 1 :b 2} {:a 3})
(doc map)
(map #(+ % 1) [1 2 3])
(empty? [])
(empty? [1])
(require '(accounting.service [event :as e]))
(e/list 8 1)
(:event_date (e/list 8 1))
(:event_date (first (e/list 8 1)))
(type "1")
(type (:event_date (first (e/list 8 1))))
(doc map)
(map #(+ % 1) [1 2 3])
(merge {:a 1 :b 2} {:c 3})
(require '(accounting.service [db :as db]))
(e/list 8 1)
(db/convert-date :event_date (e/list 8 1))
(require '(accounting.service [db :as db]))
(require '(accounting.service [event :as e]))
(db/convert-date :event_date (e/list 8 1))
(require '(accounting.service [db :as db]))
(db/convert-date :event_date (e/list 8 1))
(require '(accounting.service [event :as e]))
(db/convert-date :event_date (e/list 8 1))
(require '(accounting [operations :as o]))
(conj [1 2] 4)
(conj [] 4)
(list)
(recalculate-cumulatives [{:amount 5] {:amount 10}] 0)
(recalculate-cumulatives [{:amount 5} {:amount 10}] 0)
(o/recalculate-cumulatives [{:amount 5} {:amount 10}] 0)
(require '(accounting [operations :as o]))
(o/recalculate-cumulatives [{:amount 5} {:amount 10}] 0)
(require '(accounting [operations :as o]))
(o/recalculate-cumulatives [{:amount 5} {:amount 10}] 0)
(o/recalculate-cumulatives [{:amount 5 :cumulative_amount 0} {:amount 10 :cumulative_amount 0}] 0)
(reduce #(+ %1 %2) 5 [1 2 3])
(reduce #(str %1 %2) 5 [1 2 3])
(reduce #([(+ (first %1) %2) (str (second %1) %2)]) [5 ""] [1 2 3])
(reduce #([(+ (first %2) %1) (str (second %2) %1)]) [5 ""] [1 2 3])
(reduce #([(+ (first %1) %2) (str (second %1) %2)]) [5 ""] [1 2 3])
[(+ 1 2) (+4 5)]
[(+ 1 2) (+ 4 5)]
(reduce #([(+ (first %1) %2) (str (second %1) %2)]) [5 ""] [1 2 3])
(reduce #(conj %1 %2) [5 ""] [1 2 3])
(reduce #([(first %1) (str (second %1) %2)]) [5 ""] [1 2 3])
(reduce #([(first %1) (str %2)]) [5 ""] [1 2 3])
(reduce #([(first %1) %1]) [5 ""] [1 2 3])
(reduce #([(first %1) (str %2)]) [5 ""] [1 2 3])
(reduce #([(first %1) ""]) [5 ""] [1 2 3])
(reduce #([5 ""]) [5 ""] [1 2 3])
(reduce #(7) [5 ""] [1 2 3])
#(6)
(#(6))
(#(6) 6)
(#(%1) 6)
(#((+ %1 3) 6)
)
(#(+ %1 3) 6)
(#([%1 3]) 6)
(#(([%1 3])) 6)
(#([%1 3]) 6)
(require '(accounting [operations :as o]))
(o/recalculate-cumulatives [{:amount 5 :cumulative_amount 0} {:amount 10 :cumulative_amount 0}] 0)
(comb-help [6 [{:a 1 :b 2}]] {:amount 5, :cumulative_amount 0})
(o/comb-help [6 [{:a 1 :b 2}]] {:amount 5, :cumulative_amount 0})
(doc merge)
(require '(accounting [operations :as o]))
(o/comb-help [6 [{:a 1 :b 2}]] {:amount 5, :cumulative_amount 0})
(o/recalculate-cumulatives [{:amount 5 :cumulative_amount 0} {:amount 10 :cumulative_amount 0}] 0)
(require '(accounting [operations :as o]))
(o/recalculate-cumulatives [{:amount 5 :cumulative_amount 0} {:amount 10 :cumulative_amount 0}] 0)
(require '(accounting [utils :as u]))
(u/string-to-sql-date "2013-05-20")
(java.text.SimpleDateFormat. "yyyy-MM-dd")
(.format (java.text.SimpleDateFormat. "yyyy-MM-dd") "1234-11-05")
(.format "1234-11-05")
((.format (java.text.SimpleDateFormat. "yyyy-MM-dd")) "1234-11-05"))
((.format (java.text.SimpleDateFormat. "yyyy-MM-dd")) "1234-11-05")
((.format (java.text.SimpleDateFormat. "yyyy-MM-dd") "1234-11-05")
)
((.format (java.text.SimpleDateFormat. "yyyy-MM-dd")) "1234-11-05")
(.format (java.text.SimpleDateFormat. "yyyy-MM-dd") "1234-11-05")
(.format (java.text.SimpleDateFormat. "yyyy-MM-dd") "1998-11-05")
(.parse (java.text.SimpleDateFormat. "yyyy-MM-dd") "1998-11-05")
(require '(accounting [utils :as u]))
(u/string-to-sql-date "2013-05-20")
(require '(accounting [routes :as r]))
(require '(sandbar [core :as c]))
(c/redirect "aa")
(require '(compojure [core :as co]))
(co/redirect "aa")
(require '(ring.util [response :as re]))
(re/redirect "aa")
(require '(accounting [operations :as o]))
(o/to-date nil)
(cond-> (nil? nil) "huu")
(cond (nil? nil) "huu")
(cond (nil? "aa") "huu")
(java.lang.Long/MIN_VALUE)
(java.sql.Date. (java.lang.Long/MIN_VALUE))
(java.sql.Date. (java.lang.Long/MAX_VALUE))
(java.sql.Date. 0)
