(authenticator 2)
(accounting.routes/authenticator 2)
(:require [accounting.operations :as operations])
ecit
(doc nil?)
(if (nil? nil) 1 2)
(if (nil? 1 1 2)
(if (nil?) 1 1 2)
(if (nil? 1) 1 2)
exiy
(= 1 2)
(= 1 1)
(let [a {:a 1 :b 2}] a)
(let [a {:a 1 :b 2}] (:a a))
(let [a {:a 1 :b 2}] (:b a))
([5 6 7] 1)
([5 6 7] 0)
(first [1 2 3])
(first [])
(use 'accounting.service.account)
(list 8)
(use 'accounting.service.user)
(require 'accounting.service.user :as user)
(require 'accounting.service.user :as 'user)
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.service.user)
(get-user-id "Testi")
(use 'accounting.operations)
(session-put! "user-id" 8)
(use 'sandbar.stateful-session)
(session-put! "user-id" 8)
(account/list 8)
(use 'accounting.service.account)
)list 8)
(list 8)
(use 'accounting.service.account)
(list 8)
(require '(clj-json [core :as json]))
(json/parse-string "{\"foo\":\"bar\"}")
(json/parse-string "{foo:\"bar\"}")
(json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}")
(:a (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}"))
(:b (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}"))
(doc json/parse-string)
(first (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}"))
(last (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}"))
(first (last (json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}")))
(json/parse-string "{\"foo\":\"bar\", \"a\":\"b\"}" true)
(require '(korma [db :as db]))
(doc db/insert)
(require '(korma [core :as core]))
(doc core/insert)
(use '(accounting.service.accounting))
(get 1 1)
(get 0 1)
(get 0 0)
(get 1 6)
(get 1 1)
(use '(accounting.service.accounting))
(get 8 1)
(get 8 0)
(get 8 3)
(list 8)
(require '(accounting.service [accounting :as a]))
(require '(accounting.service [account :as a]))
(a/get 8 1)
(a/get 8 2)
(a/get 8 3)
(a/get 8 7)
(require '(accounting.service [account :as a]))
(a/new "testi" "foo" 1)
(a/new "testi" "foo" 2)
(a/new "testi" "foo" 8)
(require '(accounting.service [account :as a]))
(a/new "testi33" "foo" 8)
(require '(accounting.service [account :as a]))
(a/remove [8 21])
(a/remove 8 21)
(read-string "66")
(+ "6" 6)
"6"
(require '(korma [db :as db]))
(require '(korma [core :as core]))
(require '(accounting.service [account :as a]))
(require '(accounting.service [db :as d]))
(require '(korma [core :as core]))
(require '(korma [db :as db]))
(select d/accounts)
(select d/account)
(sb/select d/account)
(db/select d/account)
(core/select d/account)
(core/select d/account (fields {:name}))
(core/select d/account (fields :name))
(core/select d/account (core/fields :name))
(core/exec-raw "select * from event" [])
(core/exec-raw ["select * from event" []] :result)
(core/exec-raw ["select * from event" []] :results)
(core/exec-raw ["select * from account" []] :results)
(doc core/exec-raw)
(core/exec-raw ["select name from account" []] :results)
(merge {:a 1 :b 2} {c: 3})
(merge {:a 1 :b 2} {:c 3})
(merge {:a 1 :b 2} {:a 3})
(doc map)
(map #(+ % 1) [1 2 3])
(empty? [])
(empty? [1])
